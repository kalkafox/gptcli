name: Build and push Docker image

on:
  push:
    branches: ['main']
    tags: ['v*']
  pull_request:
    branches: ['main']
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  PKG_CONFIG_ALLOW_CROSS: 1

jobs:
  build-release:
    runs-on: ubuntu-latest

    steps:
      - name: Create release
        id: build-release
        uses: shogo82148/actions-create-release@v1
        with:
          github_token: ${{ secrets.RELEASE_SECRET }}

  build-docker:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3.5.0
      - uses: swatinem/rust-cache@v2.2.1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.5.0
      - name: Log in to Docker Hub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4.3.0
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            latest
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.revision=${{ github.sha }}
      - name: Build
        run: |
          sudo apt update && sudo apt install musl-tools musl-dev -y
          rustup target add x86_64-unknown-linux-musl
          cargo build --release --target x86_64-unknown-linux-musl
      - name: Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-linux:
    runs-on: ubuntu-latest
    needs: build-release

    steps:
      - uses: actions/checkout@v3.5.0
      - uses: swatinem/rust-cache@v2.2.1
      - name: Build
        run: |
          cargo build --release
      - name: Upload artifact
        if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ needs.build-release.outputs.upload_url }}
          asset_path: ./target/release/gptcli
          asset_name: gptcli-linux-${{ matrix.arch }}
          asset_content_type: application/octet-stream

  build-macos:
    runs-on: macos-latest
    needs: build-release

    steps:
      - uses: actions/checkout@v3.5.0
      - uses: swatinem/rust-cache@v2.2.1
      - name: Build
        run: |
          cargo build --release
      - name: Upload artifact
        if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ needs.build-release.outputs.upload_url }}
          asset_path: ./target/release/gptcli
          asset_name: gptcli-macos-${{ matrix.arch }}
          asset_content_type: application/octet-stream

  build-windows:
    runs-on: windows-latest
    needs: build-release

    steps:
      - uses: actions/checkout@v3.5.0
      - uses: swatinem/rust-cache@v2.2.1
      - name: Build
        run: |
          cargo build --release
      - name: Upload artifact
        if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ needs.build-release.outputs.upload_url }}
          asset_path: ./target/release/gptcli.exe
          asset_name: gptcli-windows-${{ matrix.arch }}.exe
          asset_content_type: application/octet-stream
